local Lib = {
    [18003] = 'Magic Fox',
    [18006] = 'Agony',
    [18002] = 'Spike',
    [18001] = 'Aesthetic Cat',
    [18004] = 'Chimera',
    [18005] = 'Hydra',
    [1002] = 'Dog',
    [1001] = 'Cat',
    [79003] = 'Giant Penguin',
    [78005] = 'Randolph',
    [16011] = 'C0RE SH0CK',
    [17002] = 'Dominus Cherry',
    [17007] = 'Dominus Rainbow',
    [66010] = 'Skeleton Ghost'
}

local thresholds = {
    ["magic fox"] = {
        gold = {notify = 1600000},
        rainbow = {notify = 3100000},
        darkmatter = {notify = 10000000}
    },
    ["agony"] = {
        gold = {notify = 9000000},
        rainbow = {notify = 18000000},
        darkmatter = {notify = 51000000}
    },
    ["spike"] = {
        gold = {notify = 1500000},
        rainbow = {notify = 3000000},
        darkmatter = {notify = 10000000}
    },
    ["aes cat"] = {
        gold = {notify = 1500000},
        rainbow = {notify = 2500000},
        darkmatter = {notify = 9000000}
    },
    ["chimera"] = {
        gold = {notify = 3000000},
        rainbow = {notify = 5800000},
        darkmatter = {notify = 18000000}
    },
    ["hydra"] = {
        gold = {notify = 5000000},
        rainbow = {notify = 9000000},
        darkmatter = {notify = 26000000}
    },
    ["dog"] = {
        regular = {notify = 400000},
        gold = {notify = 100000},
        rainbow = {notify = 100000},
        darkmatter = {notify = 100000}
    },
    ["cat"] = {
        regular = {notify = 400000},
        gold = {notify = 100000},
        rainbow = {notify = 100000},
        darkmatter = {notify = 100000}
    },
    ["giant penguin"] = {
        gold = {notify = 42500000},
        rainbow = {notify = 84000000},
        darkmatter = {notify = 252100000}
    },
    ["randolph"] = {
        regular = {notify = 10000000},
        gold = {notify = 28000000},
        rainbow = {notify = 55000000},
        darkmatter = {notify = 162000000}
    },
    ["c0re sh0ck"] = {
        rainbow = {notify = 1000000}
    },
    ["dominus cherry"] = {
        glitched = {notify = true}
    },
    ["dominus rainbow"] = {
        glitched = {notify = true}
    },
    ["skeleton ghost"] = {
        rainbow = {notify = 10000000}
    }
}

}

-- Function to Notify
local function notify(message)
    local StarterGui = game:GetService("StarterGui")
    StarterGui:SetCore("SendNotification", {
        Title = "Pet Notification",
        Text = message,
        Duration = 10
    })
end

-- Format Number
local function fn(number)
    local formatted = tostring(number)
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then
            break
        end
    end
    return formatted
end

-- Check Pets
local function checkPets(playerPets, playerName)
    local petDirectory = require(game.ReplicatedStorage['1 | Directory']).Pets
    local stats = {}
    local totalPets = 0

    for _, pet in pairs(playerPets) do
        local petName = Lib[pet.n] or "Unknown Pet"
        local petType = pet.dm and "DM" or pet.rb and "Rainbow" or pet.g and "Gold" or "Regular"
        local petValue = pet.l or 0
        local key = petName .. "-" .. petType .. "-" .. petValue
        stats[key] = (stats[key] or 0) + 1
        totalPets += 1

        -- Check thresholds
        if thresholds[petName] and thresholds[petName][petType:lower()] then
            local minValue, maxValue = table.unpack(thresholds[petName][petType:lower()])
            if petValue >= minValue then
                notify(playerName .. ": " .. petName .. " (" .. petType .. ") exceeds minimum threshold of " .. minValue .. ". Value: " .. fn(petValue))
            end
            if petValue > maxValue then
                notify(playerName .. ": " .. petName .. " (" .. petType .. ") exceeds maximum threshold of " .. maxValue .. ". Value: " .. fn(petValue))
            end
        elseif petValue == 0 then
            notify(playerName .. ": " .. petName .. " (" .. petType .. ") has a value of 0!")
        end
    end

    return stats, totalPets
end

-- Gather Player Pets
local s = "Inventory of All Players\n"
local sortedStats = {}

for _, player in pairs(game.Players:GetPlayers()) do
    local pets = workspace.__REMOTES.Core['Get Other Stats']:InvokeServer()[player.Name].Save.Pets
    if pets then
        local petStats, totalPets = checkPets(pets, player.Name)
        s = s .. "Inventory of " .. player.Name .. "\nTotal: " .. totalPets .. "\n\n"
        for petKey, count in pairs(petStats) do
            local petParts = petKey:split("-")
            local petDisplay = petParts[1] .. " | " .. fn(petParts[3])
            table.insert(sortedStats, count .. "x " .. petParts[2] .. " " .. petDisplay)
        end
    end
end

-- Sort and Display Results
table.sort(sortedStats, function(a, b)
    return tonumber(a:split(" | ")[2]) > tonumber(b:split(" | ")[2])
end)

for _, stat in pairs(sortedStats) do
    s = s .. stat:split(" | ")[1] .. " | " .. fn(stat:split(" | ")[2]) .. "\n"
end

print(s)
