local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local lp = Players.LocalPlayer

-- First try to load the Directory from the game
local Dir = {}
pcall(function()
    Dir = require(game:GetService("ReplicatedStorage"):FindFirstChild("Directory") or {}
end)

-- If the game's Directory is empty or doesn't exist, use our fallback table
if not next(Dir) then
    Dir = { 
        [77002] = 'Festive Dragon',
        [9004] = 'Wavy Cheeta',
        [7004] = 'Dragon',
        [8004] = 'Demon',
        [5004] = 'Bat',
        [6004] = 'Ladybug',
        [66010] = 'Skeleton Ghost',
        [4004] = 'Seal',
        [14001] = 'Revurse',
        [2004] = 'Mouse',
        [16012] = 'Cyborg Dominus',
        [16010] = 'C0RE',
        [77003] = 'Snow Spike',
        [15005] = 'Green Gummy Bear',
        [13007] = 'Space Dragon',
        [10004] = 'Electric Slime',
        [66002] = 'Zombie Dog',
        [76002] = 'Festive Dog',
        [15008] = 'Rainbow',
        [16002] = 'Cyborg Dog',
        [12003] = 'Angel',
        [13001] = 'Alien',
        [15010] = 'Ame Damnee',
        [17003] = 'Dominus Noob',
        [66003] = 'Spider',
        [12007] = 'Mortuus',
        [12005] = 'Ice Queen',
        [11004] = 'Lava Watermelon',
        [76004] = 'Festive Racoon',
        [66004] = 'Pumpkin',
        [16006] = 'Red Space Ranger',
        [16001] = 'Cyborg Cat',
        [11002] = 'Sherbert',
        [76001] = 'Festive Cat',
        [66001] = 'Zombie Cat',
        [79003] = 'Giant Penguin',
        [15007] = 'Cookie',
        [1001] = 'Cat',
        [3001] = 'Dalmatian',
        [2001] = 'Brown Cat',
        [5001] = 'Owl',
        [90010] = 'Huge Cat',
        [7001] = 'Watermelon',
        [6001] = 'Cheeta',
        [9001] = 'Fantasy Dragon',
        [8001] = 'Bomb',
        [66006] = 'Ghostdeeri',
        [12004] = 'Fire King',
        [90003] = 'Red Snake',
        [78002] = 'Gingerbread',
        [90004] = 'Purple Snake',
        [10003] = 'Lava Turtle',
        [15001] = 'Candy Cane',
        [18002] = 'Spike',
        [90011] = 'Giant Mortuus',
        [17009] = 'Dominus Huge',
        [78003] = 'Reindeer',
        [2005] = 'White Bunny',
        [1005] = 'Orange Cat',
        [10002] = 'Lava Dalmatian',
        [8005] = 'Cyclops',
        [9005] = 'Wavy Tiger',
        [4005] = 'Racoon',
        [90002] = 'Green Snake',
        [78004] = 'Festive Dominus',
        [5005] = 'Bee',
        [18006] = 'Agony',
        [90006] = 'Dominus Partner',
        [66007] = 'Sorrow',
        [14003] = 'Space Owl',
        [17007] = 'Dominus Rainbow',
        [90001] = 'BIG Maskot',
        [11005] = 'Wavy Bee',
        [10006] = 'Dominus Messor',
        [14004] = 'Space Cyclops',
        [17001] = 'Dominus Pumpkin',
        [12002] = 'Reaper',
        [2002] = 'White Cat',
        [3002] = 'Bear',
        [4002] = 'Crocodile',
        [5002] = 'Monkey',
        [6002] = 'Tiger',
        [7002] = 'Yeti',
        [8002] = 'Ghost',
        [9002] = 'Cherry Bomb',
        [11006] = 'Unicorn',
        [18005] = 'Hydra',
        [77001] = 'Festive Seal',
        [16011] = 'C0RE SH0CK',
        [18004] = 'Chimera',
        [1002] = 'Dog',
        [12006] = 'Immortuos',
        [18001] = 'Aesthetic Cat',
        [14009] = '1NE',
        [18003] = 'Magic Fox',
        [17006] = 'Dominus Damnee',
        [17008] = 'Dominus Electric',
        [16004] = 'Cyborg',
        [17002] = 'Dominus Cherry',
        [10008] = 'Dominus Empyreus',
        [14007] = 'Dark Saturn',
        [17005] = 'Dominus HeadStack',
        [13003] = 'Wooga',
        [16003] = 'Computer',
        [16007] = 'Friendly Cyborg',
        [16009] = 'Cyborg Demon',
        [12001] = 'Tank',
        [16008] = 'RoVer',
        [16005] = 'Space Ranger',
        [15004] = 'Green Lollipop',
        [66008] = 'Willow Wisp',
        [13005] = 'Space Dog',
        [66009] = 'Willow Wisp Green',
        [90007] = 'Love Dog',
        [11003] = 'Robot',
        [1004] = 'Lamb',
        [10001] = 'Lava Zebra',
        [14005] = 'Space Bear',
        [90008] = 'Noob',
        [15009] = 'Dark Candy Corn',
        [77004] = 'Ice Spike',
        [13004] = 'Space Cat',
        [15002] = 'Candy Corn',
        [15011] = 'Domortuus',
        [13006] = 'Space Bunny',
        [15006] = 'Yellow Gummy Bear',
        [78001] = 'Festive Ame Damnee',
        [8003] = 'Cherry Monkey',
        [14008] = 'ZER0',
        [14006] = 'Saturn',
        [17004] = 'Dominus Wavy',
        [14002] = 'HeadStack',
        [13002] = 'Puffer',
        [76003] = 'Festive Bunny',
        [3004] = 'Pig',
        [15003] = 'Red Lollipop',
        [78005] = 'Randolph',
        [10007] = 'Dominus Frigidus',
        [66005] = 'Skeleton',
        [6003] = 'Zebra',
        [5003] = 'Turtle',
        [4003] = 'Platypus',
        [3003] = 'Polar Bear',
        [2003] = 'White Dog',
        [1003] = 'Bunny',
        [11001] = 'Zombie',
        [10005] = 'Electric Ghost',
        [7003] = 'Slime',
        [3005] = 'Panda',
        [79002] = 'Festive C0RE',
        [4001] = 'Koala',
        [90009] = 'Love Cat',
        [9003] = 'Wavy Zebra',
        [79001] = 'Festive Immortuos',
        [90005] = 'Wavy Snake'
    }
end

-- Setup CoreGui Screen
local gui = Instance.new("ScreenGui", game:GetService("CoreGui"))
gui.Name = "Trade Scam Gui Ps1üêæ//fearthedestiny\\"
gui.ResetOnSpawn = false

-- Main Frame
local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 500, 0, 450)
frame.Position = UDim2.new(0.5, -250, 0.5, -225)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Active = true

-- Dragging system
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Title
local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(0, 130, 180)
title.Text = "Trade Scam Gui Ps1üêæ//fearthedestiny\\"
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18
title.TextStrokeTransparency = 0.5

-- Search bar
local searchb = Instance.new("TextBox", frame)
searchb.PlaceholderText = "üîç Search pets..."
searchb.Size = UDim2.new(1, -120, 0, 25)
searchb.Position = UDim2.new(0, 10, 0, 40)
searchb.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
searchb.TextColor3 = Color3.fromRGB(255, 255, 255)
searchb.Text = ""
searchb.Font = Enum.Font.SourceSans
searchb.TextSize = 14

-- Refresh Button
local refresh = Instance.new("TextButton", frame)
refresh.Text = "üîÑ Refresh"
refresh.Size = UDim2.new(0, 100, 0, 25)
refresh.Position = UDim2.new(1, -110, 0, 40)
refresh.BackgroundColor3 = Color3.fromRGB(0, 100, 160)
refresh.TextColor3 = Color3.new(1, 1, 1)
refresh.Font = Enum.Font.SourceSansBold
refresh.TextSize = 14

-- Trade Button
local tradeBtn = Instance.new("TextButton", frame)
tradeBtn.Text = "‚û°Ô∏è Trade Selected"
tradeBtn.Size = UDim2.new(0, 150, 0, 30)
tradeBtn.Position = UDim2.new(1, -160, 0, 70)
tradeBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 100)
tradeBtn.TextColor3 = Color3.new(1, 1, 1)
tradeBtn.Font = Enum.Font.SourceSansBold
tradeBtn.TextSize = 16

-- Status Label
local status = Instance.new("TextLabel", frame)
status.Size = UDim2.new(1, -180, 0, 30)
status.Position = UDim2.new(0, 10, 0, 70)
status.Text = "Waiting for Trade ID..."
status.BackgroundTransparency = 0.4
status.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
status.TextColor3 = Color3.new(1, 1, 1)
status.Font = Enum.Font.SourceSans
status.TextSize = 14
status.TextWrapped = true
status.TextXAlignment = Enum.TextXAlignment.Left

-- Selected Count Label
local count_selected = Instance.new("TextLabel", frame)
count_selected.Size = UDim2.new(1, 0, 0, 20)
count_selected.Position = UDim2.new(0, 10, 0, 110)
count_selected.Text = "Pets Selected: 0"
count_selected.BackgroundTransparency = 1
count_selected.TextColor3 = Color3.fromRGB(255, 255, 255)
count_selected.Font = Enum.Font.SourceSans
count_selected.TextSize = 14
count_selected.TextXAlignment = Enum.TextXAlignment.Left

-- Pet List ScrollingFrame
local ScrollingFrame = Instance.new("ScrollingFrame", frame)
ScrollingFrame.Size = UDim2.new(1, -20, 1, -140)
ScrollingFrame.Position = UDim2.new(0, 10, 0, 135)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.ScrollBarThickness = 8
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
local layout = Instance.new("UIListLayout", ScrollingFrame)
layout.Padding = UDim.new(0, 4)
layout.SortOrder = Enum.SortOrder.LayoutOrder

-- Selected IDs
local selected_IDs = {}

-- Live count updater
task.spawn(function()
    while task.wait(0.2) do
        local total = 0
        for _ in pairs(selected_IDs) do total += 1 end
        count_selected.Text = "Pets Selected: " .. total
    end
end)

-- Format number with commas
local function fn(number)
    if not number then return 'nil' end
    local formatted = tostring(number)
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted
end

-- Trade ID tracking and status update
local tradeId = 0
local tradeUpdateEvent = game:FindFirstChild("Trade Update", true)
if tradeUpdateEvent then
    tradeUpdateEvent.OnClientEvent:Connect(function(id)
        tradeId = id
        status.Text = "Trade ID: " .. id .. " ‚úîÔ∏è"
    end)
else
    status.Text = "Trade Update event not found."
end

-- Load pets function
local function LoadPets()
    for _, v in pairs(ScrollingFrame:GetChildren()) do
        if v:IsA("TextButton") then v:Destroy() end
    end
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    task.wait(0.2)

    local Pets = workspace.__REMOTES.Core["Get Stats"]:InvokeServer().Save.Pets
    table.sort(Pets, function(a, b) return tonumber(a.xp) > tonumber(b.xp) end)

    local yOffset = 0
    for _, v in pairs(Pets) do
        if v.xp > -3 then
            local name = Dir[tonumber(v.n)] or "Unknown (".. tostring(v.n) ..")"
            local prefix = v.dm and v.r and "Glitched" or v.dm and "Dark Matter" or v.r and "Rainbow" or v.g and "Gold" or "Regular"

            local b = Instance.new("TextButton", ScrollingFrame)
            b.Size = UDim2.new(1, -10, 0, 24)
            b.Position = UDim2.new(0, 0, 0, yOffset)
            b.BackgroundColor3 = Color3.fromRGB(0, 130, 180)
            b.Text = " " .. fn(v.l) .. " | " .. prefix .. " " .. name
            b.TextColor3 = Color3.fromRGB(218, 218, 218)
            b.Font = Enum.Font.SourceSansBold
            b.TextSize = 14
            b.Name = tostring(v.id)
            b.TextXAlignment = Enum.TextXAlignment.Left
            b.BackgroundTransparency = selected_IDs[v.id] and 0.5 or 1
            b.Visible = b.Text:lower():match(searchb.Text:lower() or "") ~= nil
            Instance.new("UIStroke", b).ApplyStrokeMode = Enum.ApplyStrokeMode.Border

            b.MouseButton1Click:Connect(function()
                selected_IDs[v.id] = not selected_IDs[v.id] and true or nil
                b.BackgroundTransparency = selected_IDs[v.id] and 0.5 or 1
            end)

            yOffset = yOffset + 28
        end
    end
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end

-- Search update function
local function searchF(S)
    for _, v in pairs(ScrollingFrame:GetChildren()) do
        if v:IsA("TextButton") then
            v.Visible = v.Text:lower():match(S:lower()) ~= nil
        end
    end
end

searchb:GetPropertyChangedSignal("Text"):Connect(function()
    searchF(searchb.Text)
end)

refresh.MouseButton1Click:Connect(LoadPets)

-- Trade selected pets
tradeBtn.MouseButton1Click:Connect(function()
    if tradeId == 0 then
        status.Text = "‚ùå Waiting for Trade ID..."
        return
    end

    local petIds = {}
    for petId, selected in pairs(selected_IDs) do
        if selected then
            table.insert(petIds, tonumber(petId))
        end
    end

    if #petIds == 0 then
        status.Text = "‚ùå No pets selected for trade."
        return
    end

    local success1, err1 = pcall(function()
        for _, petId in ipairs(petIds) do
            workspace.__REMOTES.Game.Trading:InvokeServer("Add", tradeId, petId)
        end
    end)

    local success2, err2 = pcall(function()
        workspace.__REMOTES.Game.Inventory:InvokeServer("MultiDelete", petIds)
    end)

    local success3, err3 = pcall(function()
        workspace.__REMOTES.Game.Trading:InvokeServer("Ready", tradeId)
    end)

    if success1 and success2 and success3 then
        status.Text = "‚úÖ Traded & deleted " .. #petIds .. " pets."
        selected_IDs = {}
        LoadPets()
    else
        status.Text = "‚ùå Failed trading pets."
        warn("Trade errors:", err1, err2, err3)
    end
end)

-- Initial Load
LoadPets()
